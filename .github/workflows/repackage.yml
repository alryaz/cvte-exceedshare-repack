name: Repackage UOS/Deepin packages

on:
  workflow_dispatch:
    inputs:
      manual_url:
        description: 'URL to manual package download'
        required: false
        type: string
      ignore_existing:
        description: 'Ignore existing releases'
        required: true
        type: boolean
        default: false
  schedule:
    - cron: "0 0 * * *"

env:
  PERMANENT_RELEASE: latest
  REPOSITORY_URL: "https://home-store-packages.uniontech.com/appstore"
  REPOSITORY_DIST: "eagle"
  PACKAGE_NAME: com.cvte.exceedshare

jobs:
  download-lists:
    name: Find latest packages
    runs-on: ubuntu-latest
    outputs:
      items: ${{ steps.items.outputs.items }}
    steps:
    - name: Download Release file
      if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.manual_url == '' }}
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 3
        max_attempts: 5
        command: curl -fL -o Release "${{ env.REPOSITORY_URL }}/dists/${{ env.REPOSITORY_DIST }}/Release"
        
    - name: Parse package sources
      if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.manual_url == '' }}
      run: |
        grep -Eo '[^ ]+/Packages' Release | sort | uniq > Sources
        [ -s "Sources" ] || ( echo "Sources not found" >&2; exit 1 )
        echo "Found sources:"
        cat Sources
        
    - name: Download package sources
      if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.manual_url == '' }}
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 3
        max_attempts: 5
        command: curl -L --parallel --parallel-immediate $(sed -e 's!^!${{ env.REPOSITORY_URL }}/dists/${{ env.REPOSITORY_DIST }}/!g' Sources) > Packages

    - name: Store package items
      id: items
      run: |
        if [ -f "Packages" ]; then
          # Capture the output of the grep command
          DEB_LINKS=$(grep -oE '[^ ]+${{ env.PACKAGE_NAME }}[^ ]+\.deb' Packages | sort | uniq)
        else
          # Use the manual URL if provided
          DEB_LINKS="${{ github.event.inputs.manual_url }}"
        fi

        # Convert the output to a JSON array
        DEB_LINKS_JSON=$(echo "$DEB_LINKS" | tr ' ' '\n' | jq -R -s -c 'split("\n") | map(select(length > 0) | {path: ., file: (split("/") | last)})')

        echo $DEB_LINKS_JSON
        # Set the output
        echo "items=$DEB_LINKS_JSON" >> $GITHUB_OUTPUT


  handle-package:
    name: "Rebuild: ${{ matrix.item.file }}"
    runs-on: ubuntu-latest
    needs: download-lists
    strategy:
      matrix:
        item: ${{ fromJSON(needs.download-lists.outputs.items) }}
      fail-fast: false
    steps:
    - name: Store outputs
      id: vars
      run: |
        version="$(echo "${{ matrix.item.file }}" | rev | cut -d'_' -f2 | rev)"
        (
          echo "version=${version}"
          echo "tag=${{ env.PACKAGE_NAME }}-${version}"
          echo "artifact=file-$(echo "${{ matrix.item.file }}" | sha256sum | cut -d' ' -f1)"
        ) >> $GITHUB_OUTPUT

    - name: Create upload directory
      run: |
        mkdir -p artifacts

    - name: Check if release upload already exists
      id: check
      run: |
        url="${{ github.server_url }}/${{ github.repository }}/releases/download/${{ steps.vars.outputs.tag }}/${{ matrix.item.file }}"
        echo "url=${url}" >> $GITHUB_OUTPUT

        if curl -fLIZ "${url}" "${url}.sha256"; then
          echo "Release already exists and is uploaded"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Release does not exist or is incomplete"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Download package from repository
      if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.ignore_existing) || steps.check.outputs.exists == 'false' }}
      id: download
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 3
        max_attempts: 5
        command: |
          url="${{ matrix.item.path }}"
          if [[ "${{ matrix.item.path }}" != *"://"* ]]; then
            url="${{ env.REPOSITORY_URL }}/$url"
          fi
          curl -fL -o "${{ matrix.item.file }}" "$url"

    - name: Rebuild package for Debian
      id: rebuild_deb
      if: ${{ steps.download.outcome == 'success' }}
      run: |
        echo "::group::Extract package contents to a temporary directory"
        path=$(readlink -f ${{ github.workspace }}/unpacked)
        mkdir -p "$path"
        dpkg-deb -x "${{ matrix.item.file }}" "$path"
        dpkg-deb --control "${{ matrix.item.file }}" "$path/DEBIAN"
        echo "::endgroup::"
        
        echo "::group::Modify package contents"
        # Remove obscure dependency
        if grep -q 'deepin-elf-verify' "$path/DEBIAN/control"; then
          echo "Removing deepin-elf-verify dependency"
          sed -i '/deepin-elf-verify/d' "$path/DEBIAN/control"
        fi
        
        # Make desktop shortcut and icons
        (
            cd "$path/opt/apps/${{ env.PACKAGE_NAME }}/entries"
            find applications icons \
                -type f \
                -exec sh -c 'mkdir -p "'$path'/usr/share/$(dirname "{}")"' \; \
                -exec echo 'Symlinking /usr/share/{} to /opt/apps/${{ env.PACKAGE_NAME }}/{}' \; \
                -exec ln -s "/opt/apps/${{ env.PACKAGE_NAME }}/entries/{}" "$path/usr/share/{}" \;
        )
        
        # Check if update-desktop-database trigger is present
        if ! grep -q "update-desktop-database" "$path/DEBIAN/postinst"; then
            echo "Adding trigger to update desktop links database"
            echo 'dpkg-trigger update-desktop-database || echo "dpkg-trigger failed (likely not supported)" >&2' >> "$path/DEBIAN/postinst"
        fi
        echo "::endgroup::"
        
        echo "::group::Prepare output files"
        dpkg -b "$path" "artifacts/${{ matrix.item.file }}"
        echo "::endgroup::"

        echo "::group::Cleanup temporary files"
        rm -rf "$path"
        echo "::endgroup::"

    - name: Rebuild package for RPM
      id: rebuild_rpm
      if: ${{ steps.rebuild_deb.outcome == 'success' }}
      run: |
        echo "::group::Install alien package conversion utility"
        sudo apt-get update && sudo apt-get install -y alien
        echo "::endgroup::"

        package="${{ github.workspace }}/artifacts/${{ matrix.item.file }}"

        echo "::group::Determine package architecture"
        architecture="$(dpkg --info "$package" | grep Architecture: | cut -d':' -f2 | xargs echo -n)"
        case "$architecture" in
          all) architecture=noarch ;;
          amd64) architecture=x86_64 ;;
          arm64) architecture=aarch64 ;;
          hppa) architecture=parisc ;;
          ppc) architecture=powerpc ;;
        esac
        echo "RPM Architecture: $architecture"
        echo "::endgroup::"

        echo "::group::Extract package contents to a temporary directory"
        path=$(readlink -f ${{ github.workspace }}/unpacked)
        mkdir -p "$path"
        (
          cd "$path"
          sudo alien \
            --verbose \
            --keep-version \
            --to-rpm \
            --single \
            --scripts \
            "$package"
        ) || exit 1
        echo "::endgroup::"

        echo "::group::Rebuild package with dependency patch applied"
        (
          cd $(find "$path" -mindepth 1 -maxdepth 1 -type d -print -quit) && \
          rpmbuild \
            --buildroot "$(pwd)" \
            --bb "$(find . -mindepth 1 -maxdepth 1 -type f -name '*.spec' -print -quit)" \
            --define '__requires_exclude ^libc\\.so\\.6\\(GLIBC_PRIVATE\\)\\(64bit\\)$' \
            --target "$architecture"
        ) ||
        echo "::endgroup::"

        echo "::group::Prepare output files"
        mv "$(find "$path" -mindepth 1 -maxdepth 1 -type f -name '*.rpm')" "artifacts/"
        echo "::endgroup::"

        echo "::group::Cleanup temporary files"
        rm -rf "$path"
        echo "::endgroup::"

    - name: Upload artifacts
      if: ${{ steps.download.outcome == 'success' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.vars.outputs.artifact }}
        path: "artifacts/*"


  define-upload-matrix:
    name: Define release versions
    runs-on: ubuntu-latest
    needs: handle-package
    outputs:
      versions: ${{ steps.extract.outputs.versions }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List .deb files and extract versions
        id: extract
        run: |
          # Make sure the release and artifacts dirs exists (for ls)
          mkdir -p release
          mkdir -p artifacts
          
          # Function to copy files to release directory
          release() {
            dir="release/${{ env.PACKAGE_NAME }}-$2"
            echo "::group::Copy $1 to $dir/$3"
            mkdir -p "$dir"
            cp "$1" "$dir/$3"
            (cd "$dir" && sha256sum "$3" > "$3.sha256")
            echo "::endgroup::"
          }

          # Move packages into release directory
          for file in $(find artifacts -mindepth 2 -type f); do
            filename=$(basename "$file")
            if [[ "$filename" == *".deb" ]]; then
              version="$(dpkg --info "$file" | grep Version: | cut -d':' -f2 | xargs echo -n)"
              architecture="$(dpkg --info "$file" | grep Architecture: | cut -d':' -f2 | xargs echo -n)"
              extension=deb
            elif [[ "$filename" == *".rpm" ]]; then
              version="$(rpm -qp --qf '%{VERSION}' "$file")"
              architecture="$(rpm -qp --qf '%{ARCH}' "$file")"
              extension=rpm
            else
              echo "Unknown file encountered: $filename" >&2
              exit 1
            fi

            release "$file" "$version" "$filename"
            release "$file" "latest" "${{ env.PACKAGE_NAME }}.${architecture}.${extension}"
          done

          # Generate versions list
          echo "versions=$(ls release | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        if: ${{ steps.extract.outputs.versions != '[]' }}
        uses: actions/upload-artifact@v4
        with:
          name: release
          path: release
  

  upload-release:
    runs-on: ubuntu-latest
    needs: define-upload-matrix
    if: ${{ needs.define-upload-matrix.outputs.versions != '[]' }}
    name: Release ${{ matrix.version }} packages
    strategy:
      matrix:
        version: ${{ fromJSON(needs.define-upload-matrix.outputs.versions) }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release
          path: release

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ matrix.version }}"
          files: "release/${{ matrix.version }}/*"
          make_latest: ${{ matrix.version == env.PERMANENT_RELEASE }}
          prerelease: ${{ matrix.version != env.PERMANENT_RELEASE }}


  create-repository:
    runs-on: ubuntu-latest
    needs: [define-upload-matrix, upload-release]
    if: ${{ needs.define-upload-matrix.outputs.versions != '[]' }}
    name: Update APT repository
    steps:
      - name: Checkout signing key
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: release
          sparse-checkout: 'public.key'
          sparse-checkout-cone-mode: false
        
      - name: Download latest versions
        uses: robinraju/release-downloader@main
        with:
          tag: ${{ env.PACKAGE_NAME }}-${{ env.PERMANENT_RELEASE }}
          fileName: '*.deb'
          tarBall: false
          zipBall: false
          out-file-path: release
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare data
        id: data
        run: |
          echo "architectures<<EOF" >> $GITHUB_OUTPUT
          for file in release/*.deb; do
              echo "${file//.deb}" | rev | cut -d'.' -f1 | rev
          done | sort | uniq >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "public<<EOF" >> $GITHUB_OUTPUT
          cat release/public.key >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Generate Debian repository index
        uses: smeinecke/apt-repo-action@v2.1.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repo_supported_arch: ${{ steps.data.outputs.architectures }}
          repo_supported_version: debian
          file: "release/*.deb"
          file_target_version: debian
          public_key: ${{ steps.data.outputs.public }}
          private_key: ${{ secrets.REPO_PRIVATE }}
          key_passphrase: ${{ secrets.REPO_SECRET }}
